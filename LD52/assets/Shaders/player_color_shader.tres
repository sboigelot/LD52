[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform float TOLERANCE: hint_range(0.0,1.0);

uniform vec4 OLDCOLOR1 : hint_color;
uniform vec4 OLDCOLOR2 : hint_color;

uniform vec4 NEWCOLOR1 : hint_color;
uniform vec4 NEWCOLOR2 : hint_color;

uniform float outline_thickness : hint_range(0, 10) = 0.0;

bool approx_eq(vec4 c1, vec4 c2)
{ 
	return all(lessThan( abs( c1 - c2 ), vec4( TOLERANCE, TOLERANCE, TOLERANCE, TOLERANCE) ) ); 
}

void fragment() {
		
	vec2 nearestPixelUV = TEXTURE_PIXEL_SIZE * (round(UV / TEXTURE_PIXEL_SIZE - vec2(0.5)) + vec2(0.5));
    vec4 nearestUVColor = texture(TEXTURE, nearestPixelUV);
	vec4 color;
	
    if (approx_eq(nearestUVColor, OLDCOLOR1))
	{
		float avg = (nearestUVColor.r + nearestUVColor.g + nearestUVColor.b) / 3.0;
		avg += 0.15;
        color = vec4(NEWCOLOR1.r * avg, NEWCOLOR1.g * avg, NEWCOLOR1.b * avg, 1.0);
    }
	else if (approx_eq(nearestUVColor, OLDCOLOR2))
	{
        color = NEWCOLOR2;
    }
	else
	{
        color = nearestUVColor;
    }
	
	if(outline_thickness == 0.0)
	{
		COLOR = color;
	}
	else
	{
		//outline	
		vec2 size = TEXTURE_PIXEL_SIZE * outline_thickness;
		
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline += texture(TEXTURE, UV + vec2(0, size.y)).a;	
		outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;	
		outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
		
		outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(-size.x, size.y * 0.5)).a;
		
		outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, size.y * 0.5)).a;
		
		outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
		outline += texture(TEXTURE, UV + vec2(-size.x, -size.y * 0.5)).a;
		
		outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		outline += texture(TEXTURE, UV + vec2(size.x, -size.y * 0.5)).a;
			
		outline = min(outline, 1.0);		
		COLOR = mix(color, NEWCOLOR1, outline - color.a);
	}
}"
